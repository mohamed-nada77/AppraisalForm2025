@* /Pages/Employee/Self.cshtml *@
@page
@model AppraisalPortal.Pages.EmployeePages.SelfModel
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Employee")]

<h2>Key Responsibilities & Achievements</h2>
<p class="text-muted">Describe your main responsibilities and key achievements during the review period.</p>

<form method="post" asp-page-handler="Save" asp-antiforgery="true" class="mb-3" id="selfForm">
    <input type="hidden" name="id" value="@Model.FormId" />
    <table class="table table-sm align-middle" id="respTable">
        <thead>
            <tr>
                <th style="width:25%">Key Responsibilities *</th>
                <th>Description *</th>
                <th style="width:16%">Achievement (%) *</th>
                <th style="width:1%"></th>
            </tr>
        </thead>
        <tbody>
        @for (var i = 0; i < Model.Items.Count; i++)
        {
            <tr>
                <td><input class="form-control form-control-sm" name="Items[@i].Title" value="@Model.Items[i].Title" required /></td>
                <td><input class="form-control form-control-sm" name="Items[@i].Description" value="@Model.Items[i].Description" required /></td>
                <td>
                    <input type="number" min="0" max="100" class="form-control form-control-sm ach"
                           name="Items[@i].Achievement" value="@Model.Items[i].Achievement" required />
                    <div class="invalid-feedback">Enter a percentage between 0 and 100.</div>
                </td>
                <td><button type="button" class="btn btn-outline-danger btn-sm removeRow">✕</button></td>
            </tr>
        }
        </tbody>
    </table>
    <div class="d-flex align-items-center gap-3 mb-2">
        <button type="button" class="btn btn-outline-secondary btn-sm" id="addRow">+ Add Row</button>
        <span class="badge text-bg-light" id="avgBadge">Average Achievement: —</span>
    </div>

    <div class="mt-3">
        <label class="form-label">Additional Comments (Optional)</label>
        <textarea class="form-control" name="Comments" rows="3">@Model.Comments</textarea>
    </div>

    <div class="mt-3 d-flex gap-2">
        <button class="btn btn-secondary">Save</button>
    </div>
</form>

<form method="post" asp-page-handler="Submit" asp-antiforgery="true">
    <input type="hidden" name="id" value="@Model.FormId" />
    <button class="btn btn-primary">Submit - Please Save First</button>
</form>

@section Scripts {
<script>
(function () {
  const tbody = document.querySelector('#respTable tbody');
  const addBtn = document.getElementById('addRow');
  const avgBadge = document.getElementById('avgBadge');

  function recalcAvg() {
    const vals = [...tbody.querySelectorAll('.ach')].map(i => +i.value || 0);
    if (vals.length === 0) { avgBadge.textContent = 'Average Achievement: —'; return; }
    const avg = Math.round(vals.reduce((a,b)=>a+b,0) / vals.length);
    avgBadge.textContent = `Average Achievement: ${avg}%`;
  }

  function validateRow(input) {
    const v = +input.value;
    if (Number.isNaN(v) || v < 0 || v > 100) input.classList.add('is-invalid');
    else input.classList.remove('is-invalid');
  }

  tbody.addEventListener('input', e => {
    if (e.target.matches('.ach')) { validateRow(e.target); recalcAvg(); }
  });

  addBtn.addEventListener('click', function(){
    const idx = tbody.querySelectorAll('tr').length;
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td><input class="form-control form-control-sm" name="Items[${idx}].Title" required/></td>
      <td><input class="form-control form-control-sm" name="Items[${idx}].Description" required/></td>
      <td>
        <input type="number" min="0" max="100" class="form-control form-control-sm ach" name="Items[${idx}].Achievement" value="0" required />
        <div class="invalid-feedback">Enter a percentage between 0 and 100.</div>
      </td>
      <td><button type="button" class="btn btn-outline-danger btn-sm removeRow">✕</button></td>`;
    tbody.appendChild(tr);
    recalcAvg();
  });

  tbody.addEventListener('click', e => {
    if (e.target.closest('.removeRow')) {
      e.target.closest('tr').remove();
      recalcAvg();
    }
  });

  recalcAvg();
})();
</script>
}
